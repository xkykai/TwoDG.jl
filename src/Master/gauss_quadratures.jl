using LinearAlgebra
using Jacobi

"""
    gaussquad1d(pgauss::Integer)

Calculate Gauss integration points and weights for the interval [0,1] using
Gauss-Legendre quadrature (special case of Gauss-Jacobi with α = β = 0).

# Arguments
- `pgauss::Integer`: Order of the polynomial to be integrated exactly

# Returns
- `x::Vector{Float64}`: Coordinates of the integration points
- `w::Vector{Float64}`: Integration weights

# Example
```julia
x, w = gaussquad1d(3)
```
"""
function gaussquad1d(pgauss::Integer)
    # Number of points needed
    n = ceil(Int, (pgauss + 1)/2)
    
    # Get zeros of Jacobi polynomial (α = β = 0 for Gauss-Legendre)
    x = jacobi_zeros(n, 0.0, 0.0)
    
    # Construct Vandermonde-like matrix using Jacobi polynomials
    A = zeros(Float64, n, n)
    for i in 1:n
        A[i,:] .= jacobi.(x, i-1, 0.0, 0.0)
    end
    
    # Solve for weights
    r = zeros(Float64, n)
    r[1] = 2.0
    w = A \ r
    
    # Transform from [-1,1] to [0,1]
    x = @. (x + 1.0)/2.0
    w = @. w/2.0
    
    return x, w
end


"""
    gaussquad2d(pgauss::Integer)

Calculate Gauss integration points and weights in 2D for [0,1]×[0,1].

# Arguments
- `pgauss::Integer`: Order of the polynomial to be integrated exactly

# Returns
- `x::Matrix{Float64}`: Coordinates of the integration points (N×2 matrix)
- `w::Vector{Float64}`: Integration weights
"""
function gaussquad2d(pgauss::Integer)
    if pgauss == 0 || pgauss == 1
        w = [5.00000000000000000E-01]
        x = [3.33333333333333333E-01  3.33333333333333333E-01]
        
    elseif pgauss == 2
        w = [1.66666666666666666E-01,  1.66666666666666667E-01,  1.66666666666666667E-01]
        x = [6.66666666666666667E-01  1.66666666666666667E-01;
             1.66666666666666667E-01  6.66666666666666667E-01;
             1.66666666666666667E-01  1.66666666666666667E-01]
        
    elseif pgauss == 3
        w = [-2.81250000000000000E-01,  2.60416666666666667E-01,  2.60416666666666667E-01,  2.60416666666666666E-01]
        x = [3.33333333333333333E-01  3.33333333333333333E-01;
             6.00000000000000000E-01  2.00000000000000000E-01;
             2.00000000000000000E-01  6.00000000000000000E-01;
             2.00000000000000000E-01  2.00000000000000000E-01]
        
    elseif pgauss == 4
        w = [1.116907948390055E-01,  1.116907948390055E-01,  1.116907948390055E-01,
             5.497587182766100E-02,  5.497587182766100E-02,  5.497587182766100E-02]
        x = [1.081030181680700E-01  4.459484909159650E-01;
             4.459484909159650E-01  1.081030181680700E-01;
             4.459484909159650E-01  4.459484909159650E-01;
             8.168475729804590E-01  9.157621350977100E-02;
             9.157621350977100E-02  8.168475729804590E-01;
             9.157621350977100E-02  9.157621350977100E-02]
        
    elseif pgauss == 5
        w = [1.12500000000000E-01,   6.61970763942530E-02,   6.61970763942530E-02,   6.61970763942530E-02,
             6.29695902724135E-02,   6.29695902724135E-02,   6.29695902724135E-02]
        x = [3.33333333333333E-01  3.33333333333333E-01;
             5.97158717897700E-02  4.70142064105115E-01;
             4.70142064105115E-01  5.97158717897700E-02;
             4.70142064105115E-01  4.70142064105115E-01;
             7.97426985353087E-01  1.01286507323456E-01;
             1.01286507323456E-01  7.97426985353087E-01;
             1.01286507323456E-01  1.01286507323456E-01]
             
    elseif pgauss == 6
        w = [5.83931378631895E-02,   5.83931378631895E-02,   5.83931378631895E-02,   2.54224531851035E-02,
             2.54224531851035E-02,   2.54224531851035E-02,   4.14255378091870E-02,   4.14255378091870E-02,
             4.14255378091870E-02,   4.14255378091870E-02,   4.14255378091870E-02,   4.14255378091870E-02]
        x = [5.01426509658179E-01  2.49286745170910E-01;
             2.49286745170910E-01  5.01426509658179E-01;
             2.49286745170910E-01  2.49286745170910E-01;
             8.73821971016996E-01  6.30890144915020E-02;
             6.30890144915020E-02  8.73821971016996E-01;
             6.30890144915020E-02  6.30890144915020E-02;
             5.31450498448170E-02  3.10352451033784E-01;
             6.36502499121399E-01  5.31450498448170E-02;
             3.10352451033784E-01  6.36502499121399E-01;
             5.31450498448170E-02  6.36502499121399E-01;
             6.36502499121399E-01  3.10352451033784E-01;
             3.10352451033784E-01  5.31450498448170E-02]
             
    elseif pgauss == 7
        w = [-7.47850222338410E-02,  8.78076287166040E-02,   8.78076287166040E-02,   8.78076287166040E-02,
              2.66736178044190E-02,   2.66736178044190E-02,   2.66736178044190E-02,   3.85568804451285E-02,
              3.85568804451285E-02,   3.85568804451285E-02,   3.85568804451285E-02,   3.85568804451285E-02,
              3.85568804451285E-02]
        x = [3.33333333333333E-01  3.33333333333333E-01;
             4.79308067841920E-01  2.60345966079040E-01;
             2.60345966079040E-01  4.79308067841920E-01;
             2.60345966079040E-01  2.60345966079040E-01;
             8.69739794195568E-01  6.51301029022160E-02;
             6.51301029022160E-02  8.69739794195568E-01;
             6.51301029022160E-02  6.51301029022160E-02;
             4.86903154253160E-02  3.12865496004874E-01;
             6.38444188569810E-01  4.86903154253160E-02;
             3.12865496004874E-01  6.38444188569810E-01;
             4.86903154253160E-02  6.38444188569810E-01;
             6.38444188569810E-01  3.12865496004874E-01;
             3.12865496004874E-01  4.86903154253160E-02]

    elseif pgauss == 8
        w = [7.21578038388935E-02,   4.75458171336425E-02,   4.75458171336425E-02,   4.75458171336425E-02,
             5.16086852673590E-02,   5.16086852673590E-02,   5.16086852673590E-02,   1.62292488115990E-02,
             1.62292488115990E-02,   1.62292488115990E-02,   1.36151570872175E-02,   1.36151570872175E-02,
             1.36151570872175E-02,   1.36151570872175E-02,   1.36151570872175E-02,   1.36151570872175E-02]
        x = [3.33333333333333E-01  3.33333333333333E-01;
             8.14148234145540E-02  4.59292588292723E-01;
             4.59292588292723E-01  8.14148234145540E-02;
             4.59292588292723E-01  4.59292588292723E-01;
             6.58861384496480E-01  1.70569307751760E-01;
             1.70569307751760E-01  6.58861384496480E-01;
             1.70569307751760E-01  1.70569307751760E-01;
             8.98905543365938E-01  5.05472283170310E-02;
             5.05472283170310E-02  8.98905543365938E-01;
             5.05472283170310E-02  5.05472283170310E-02;
             8.39477740995800E-03  2.63112829634638E-01;
             7.28492392955404E-01  8.39477740995800E-03;
             2.63112829634638E-01  7.28492392955404E-01;
             8.39477740995800E-03  7.28492392955404E-01;
             7.28492392955404E-01  2.63112829634638E-01;
             2.63112829634638E-01  8.39477740995800E-03]

    elseif pgauss == 9
        w = [4.85678981413995E-02,   1.56673501135695E-02,   1.56673501135695E-02,   1.56673501135695E-02,   
             3.89137705023870E-02,   3.89137705023870E-02,   3.89137705023870E-02,   3.98238694636050E-02,   
             3.98238694636050E-02,   3.98238694636050E-02,   1.27888378293490E-02,   1.27888378293490E-02,   
             1.27888378293490E-02,   2.16417696886445E-02,   2.16417696886445E-02,   2.16417696886445E-02,   
             2.16417696886445E-02,   2.16417696886445E-02,   2.16417696886445E-02]
        x = [3.33333333333333E-01  3.33333333333333E-01;
             2.06349616025250E-02  4.89682519198738E-01;
             4.89682519198738E-01  2.06349616025250E-02;
             4.89682519198738E-01  4.89682519198738E-01;
             1.25820817014127E-01  4.37089591492937E-01;
             4.37089591492937E-01  1.25820817014127E-01;
             4.37089591492937E-01  4.37089591492937E-01;
             6.23592928761935E-01  1.88203535619033E-01;
             1.88203535619033E-01  6.23592928761935E-01;
             1.88203535619033E-01  1.88203535619033E-01;
             9.10540973211095E-01  4.47295133944530E-02;
             4.47295133944530E-02  9.10540973211095E-01;
             4.47295133944530E-02  4.47295133944530E-02;
             3.68384120547360E-02  2.21962989160766E-01;
             7.41198598784498E-01  3.68384120547360E-02;
             2.21962989160766E-01  7.41198598784498E-01;
             3.68384120547360E-02  7.41198598784498E-01;
             7.41198598784498E-01  2.21962989160766E-01;
             2.21962989160766E-01  3.68384120547360E-02]

    elseif pgauss == 10
        w = [4.54089951913770E-02,   1.83629788782335E-02,   1.83629788782335E-02,   1.83629788782335E-02,   
             2.26605297177640E-02,   2.26605297177640E-02,   2.26605297177640E-02,   3.63789584227100E-02,   
             3.63789584227100E-02,   3.63789584227100E-02,   3.63789584227100E-02,   3.63789584227100E-02,   
             3.63789584227100E-02,   1.41636212655285E-02,   1.41636212655285E-02,   1.41636212655285E-02,   
             1.41636212655285E-02,   1.41636212655285E-02,   1.41636212655285E-02,   4.71083348186650E-03,   
             4.71083348186650E-03,   4.71083348186650E-03,   4.71083348186650E-03,   4.71083348186650E-03,   
             4.71083348186650E-03]
        x = [3.33333333333333E-01  3.33333333333333E-01;
             2.88447332326850E-02  4.85577633383657E-01;
             4.85577633383657E-01  2.88447332326850E-02;
             4.85577633383657E-01  4.85577633383657E-01;
             7.81036849029926E-01  1.09481575485037E-01;
             1.09481575485037E-01  7.81036849029926E-01;
             1.09481575485037E-01  1.09481575485037E-01;
             1.41707219414880E-01  3.07939838764121E-01;
             5.50352941820999E-01  1.41707219414880E-01;
             3.07939838764121E-01  5.50352941820999E-01;
             1.41707219414880E-01  5.50352941820999E-01;
             5.50352941820999E-01  3.07939838764121E-01;
             3.07939838764121E-01  1.41707219414880E-01;
             2.50035347626860E-02  2.46672560639903E-01;
             7.28323904597411E-01  2.50035347626860E-02;
             2.46672560639903E-01  7.28323904597411E-01;
             2.50035347626860E-02  7.28323904597411E-01;
             7.28323904597411E-01  2.46672560639903E-01;
             2.46672560639903E-01  2.50035347626860E-02;
             9.54081540029900E-03  6.68032510122000E-02;
             9.23655933587500E-01  9.54081540029900E-03;
             6.68032510122000E-02  9.23655933587500E-01;
             9.54081540029900E-03  9.23655933587500E-01;
             9.23655933587500E-01  6.68032510122000E-02;
             6.68032510122000E-02  9.54081540029900E-03]
    else
        # For higher orders, use tensor product of 1D quadrature
        x1, w1 = gaussquad1d(pgauss)
        x1 = @. 2*x1 - 1  # Transform to [-1,1]
        w1 = @. 2*w1      # Adjust weights
        
        # Create meshgrid
        n = length(x1)
        x2 = repeat(x1, 1, n)
        y2 = repeat(x1', n, 1)
        
        # Compute final coordinates and weights
        xf = @. (1 + x2 - y2 - x2*y2)/4
        yf = @. (1 + y2)/2
        
        # Reshape into required format
        w0 = w1 * w1'
        w = vec(@. (1-y2) * w0 / 8)
        x = hcat(vec(xf), vec(yf))
    end
    
    return x, w
end